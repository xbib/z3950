%{
import java.io.Reader;
import java.io.IOException;
import java.math.BigDecimal;

/**

Mike Taylor, IndexData:

"Prefix Query Format (PQF), also known as
Prefix Query Notation (PQN) was defined in 1995, as part of the YAZ
toolkit, and has since become the de facto standard representation of
RPN queries."

 From: http://www.indexdata.com/yaz/doc/tools.tkl#PQF

 The grammar of the PQF is as follows:

     query ::= top-set query-struct.

     top-set ::= [ '@attrset' string ]

     query-struct ::= attr-spec | simple | complex | '@term' term-type query

     attr-spec ::= '@attr' [ string ] string query-struct

     complex ::= operator query-struct query-struct.

     operator ::= '@and' | '@or' | '@not' | '@prox' proximity.

     simple ::= result-set | term.

     result-set ::= '@set' string.

     term ::= string.

     proximity ::= exclusion distance ordered relation which-code unit-code.

     exclusion ::= '1' | '0' | 'void'.

     distance ::= integer.

     ordered ::= '1' | '0'.

     relation ::= integer.

     which-code ::= 'known' | 'private' | integer.

     unit-code ::= integer.

     term-type ::= 'general' | 'numeric' | 'string' | 'oid' | 'datetime' | 'null'.

 You will note that the syntax above is a fairly faithful representation of RPN,
 except for the Attribute, which has been moved a step away from the term,
 allowing you to associate one or more attributes with an entire query structure.
 The parser will automatically apply the given attributes to each term as required.

 The @attr operator is followed by an attribute specification (attr-spec above).
 The specification consists of an optional attribute set, an attribute
 type-value pair and a sub-query. The attribute type-value pair is packed
 in one string: an attribute type, an equals sign, and an attribute value,
 like this: @attr 1=1003. The type is always an integer but the value may be
 either an integer or a string (if it doesn't start with a digit character).
 A string attribute-value is encoded as a Type-1 ``complex'' attribute with
 the list of values containing the single string specified, and including
 no semantic indicators.
*/

%}
%class PQFParser
%interface PQFTokens
%package org.xbib.z3950.common.pqf

%token NL
%token <String> OR
%token <String> AND
%token <String> NOT
%token <String> ATTR
%token <String> ATTRSET
%token <String> TERM
%token <String> SET
%token <String> VOID
%token <String> KNOWN
%token <String> PRIVATE
%token <String> TERMTYPE
%token <String> CHARSTRING1
%token <String> CHARSTRING2
%token <String> OPERATORS
%token <String> EQUALS
%token <BigDecimal> INTEGER

%left AND
%left OR
%left NOT

%type <PQF> pqf
%type <Query> querystruct
%type <Expression> expression
%type <AttrStr> attrstr
%type <Term> term
%type <Setname> resultset

%start pqf

%%

pqf : ATTRSET CHARSTRING1 querystruct {
        this.pqf = new PQF($2, $3);
        $$ = this.pqf;
    }
    | querystruct {
        this.pqf = new PQF($1);
        $$ = this.pqf;
    }
;

querystruct : attrspec | simple | complex | TERM TERMTYPE pqf {
        $$ = new Query($3);
};

attrspec :  ATTR attrstr querystruct {
        $$ = new Query($2, $3);
    }
    | ATTR CHARSTRING1 attrstr querystruct {
        $$ = new Query($2, $3, $4);
    };

simple : resultset {
         $$ = new Query($1);
    }
    | term {
         $$ = new Query($1);
    };

complex : expression  {
         $$ = new Query($1);
    };

resultset : SET CHARSTRING1 {
        $$ = new Setname($2);
    };

term : CHARSTRING1 {
        $$ = new Term($1);
    }
    | CHARSTRING2 {
        $$ = new Term($1);
    }
    | INTEGER {
        $$ = new Term($1);
    };

attrstr: INTEGER EQUALS INTEGER {
        $$ = new AttrStr($1, $3);
    }
    | INTEGER EQUALS CHARSTRING1 {
        $$ = new AttrStr($1, $3);
    };

expression: AND querystruct querystruct {
        $$ = new Expression($1, $2, $3);
    }
    | OR querystruct querystruct {
        $$ = new Expression($1, $2, $3);
    }
    | NOT querystruct querystruct {
        $$ = new Expression($1, $2, $3);
    }
;

%%

    private PQFLexer lexer;

    private PQF pqf;

    public PQFParser(Reader r) {
        this.lexer = new PQFLexer(r);
        lexer.nextToken();
    }

    public void yyerror(String error) {
        throw new SyntaxException("PQF error at " +
            "[" + lexer.getLine() + "," + lexer.getColumn() + "]" + ": " +  error);
    }

    public PQF getResult()
    {
        return pqf;
    }
