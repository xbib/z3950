plugins {
    id "com.github.spotbugs" version "2.0.1"
    id "org.sonarqube" version '2.8'
    id "io.codearte.nexus-staging" version "0.21.1"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: "com.github.spotbugs"

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:${project.property('junit.version')}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${project.property('junit.version')}"
        testImplementation "org.xbib:bibliographic-character-sets:${project.property('xbib-bibliographic-character-sets.version')}"
    }

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all,-fallthrough"
        if (!options.compilerArgs.contains("-processor")) {
            options.compilerArgs << '-proc:none'
        }
    }

    clean {
        delete 'out'
    }

    test {
        useJUnitPlatform()
        systemProperty 'java.util.logging.config.file',
                project.file('src/test/resources/logging.properties')
        failFast = false
        testLogging {
            events 'STARTED', 'PASSED', 'FAILED', 'SKIPPED'
        }
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTest result: ${result.resultType}"
                println "Test summary: ${result.testCount} tests, " +
                        "${result.successfulTestCount} succeeded, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped"
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
    }

    artifacts {
        archives sourcesJar, javadocJar
    }
    
    ext {
        user = 'xbib'
        projectName = 'z3950'
        projectDescription = 'Z39.50 for Java'
        scmUrl = 'https://github.com/xbib/z3950'
        scmConnection = 'scm:git:git://github.com/xbib/z3950.git'
        scmDeveloperConnection = 'scm:git:git://github.com/xbib/z3950.git'
    }

    spotbugs {
        toolVersion = '3.1.12'
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        effort = "max"
        reportLevel = "high"
    }

    spotbugsMain.reports {
        xml.enabled = false
        html.enabled = true
    }

    spotbugsTest.reports {
        xml.enabled = false
        html.enabled = true
    }

    tasks.withType(Pmd) {
        ignoreFailures = true
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
    tasks.withType(Checkstyle) {
        ignoreFailures = true
        exclude '**/PQF*java'
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    sonarqube {
        properties {
            property "sonar.projectName", "${project.group} ${project.name}"
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.tests", "src/test/java"
            property "sonar.scm.provider", "git"
            property "sonar.junit.reportsPath", "build/test-results/test/"
        }
    }

    task sonatypeUpload(type: Upload, dependsOn: build) {
        group = 'publish'
        configuration = configurations.archives
        uploadDescriptor = true
        repositories {
            if (project.hasProperty('ossrhUsername')) {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    repository(url: uri(ossrhReleaseUrl)) {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    snapshotRepository(url: uri(ossrhSnapshotUrl)) {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    pom.project {
                        groupId project.group
                        artifactId project.name
                        version project.version
                        name project.name
                        description projectDescription
                        packaging 'jar'
                        inceptionYear '2017'
                        url scmUrl
                        organization {
                            name 'xbib'
                            url 'http://xbib.org'
                        }
                        developers {
                            developer {
                                id user
                                name 'JÃ¶rg Prante'
                                email 'joergprante@gmail.com'
                                url 'https://github.com/jprante'
                            }
                        }
                        scm {
                            url scmUrl
                            connection scmConnection
                            developerConnection scmDeveloperConnection
                        }
                        licenses {
                            license {
                                name 'The Apache License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                    }
                }
            }
        }
    }
}

nexusStaging {
    packageGroup = "org.xbib"
}
